<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- JNDI 등록 : Mybatis 가 아닌, 스프링이 접속객체를 주도한다. 왜? 스프링이 트랜잭션을 관리하므로..-->
	<jee:jndi-lookup 
		id="dataSource" 
		jndi-name="jdbc/oracle"
		resource-ref="true"/>
		
	<!-- 각 기술에 맞는 트랜잭션 객체를 등록한다. 
		ex) Hibernate 사용시 :  HibernateTransactionManager 
		ex) jdbc 사용시 : DataSourceTransactionManager 
		ex) Mybatis 사용시 : DataSourceTransactionManager
	 -->	
	<bean id="dataSourceTransactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource"/>
	
	<!-- Spring JDBC 사용시 -->
	<bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource"/>							
		
	<!-- Mybatis Spring  -->	
	<bean id="sqlSessionFactoryBean" 
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:com/koreait/fashionshop/mybatis/config/config.xml"/>
		
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>			
	<!-- 모델 영역은 모든 서블릿에서 공용으로 사용할 예정이므로, ServletContext 수준에서 
		어플리케이션이 가동될때 부터 등록되어 있어야 한다.. -->
	<context:component-scan base-package="com.koreait.fashionshop.model"/>
	
	<!-- DI와 같이 객체를 인터페이스로 보유하는 방식이 아니라, 공통코드를 외부로 완전히 분리시킨 후
	원하는 시점에, 공통코드를 동작시키는 관점지향 프로그래밍을 가리켜 AOP라 부른다!	
	  -->
	<!-- 공통코드는 이미 어노테이션으로 등록되어 잇다..Bell -->
	
	<!-- 어느시점에, 어떤 메서드 호출시 공통코드를 동작시킬지를 xml로 서술해보자 -->
	<aop:config>
		<aop:aspect id="bellAspect" ref="bell">
			<!-- 어떤 메서드 실행시 관여할지 서술 -->
			<aop:pointcut expression="execution(public * com.koreait.fashionshop.model.bank.repository..*(**))" id="bellPointcut"/>
			<aop:after method="sound" pointcut-ref="bellPointcut"/>
			
		</aop:aspect>			
	</aop:config>		
	
	<!-- 방금 배운 AOP를 이용하여 트랜잭션 처리에 응용해보자!! -->
	<!-- 트랜잭션 설정 -->
	<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
		<tx:attributes>
			<tx:method name="send" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 트랜잭션을 적용할 대상인 서비스 등록 -->
	<aop:config>
		<aop:pointcut expression="execution(public * com.koreait.fashionshop.model.bank.service..*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>				
	</aop:config>	
</beans>








